
upstream %(proj_name)s {
    server 127.0.0.1:%(gunicorn_port)s;
}

server {

    listen 80;
    %(ssl_disabled)s listen 443 ssl;
    server_name %(domains_nginx)s;
    client_max_body_size 10M;
    keepalive_timeout    15;

    %(ssl_disabled)s ssl_certificate      conf/%(proj_name)s.crt;
    %(ssl_disabled)s ssl_certificate_key  conf/%(proj_name)s.key;
    %(ssl_disabled)s ssl_session_cache    shared:SSL:10m;
    %(ssl_disabled)s ssl_session_timeout  10m;
    %(ssl_disabled)s ssl_ciphers RC4:HIGH:!aNULL:!MD5;
    %(ssl_disabled)s ssl_prefer_server_ciphers on;

    location / {
        proxy_redirect      off;
        proxy_set_header    Host                    $host;
        proxy_set_header    X-Real-IP               $remote_addr;
        proxy_set_header    X-Forwarded-For         $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Protocol    $scheme;
        proxy_pass          http://%(proj_name)s;
        #  Enabling CORS
        # specifically, this example allow CORS requests from
        #  scheme    : http or https
        #  authority : any authority ending in ".mastizada.com"
        #  port      : nothing, or :
        if ($http_origin ~* (https?://[^/]*\.mozilla\.org(:[0-9]+)?)$) {
            set $cors "true";
        }
        # Nginx doesn't support nested If statements, so we use string
        # concatenation to create a flag for compound conditions

        # OPTIONS indicates a CORS pre-flight request
        if ($request_method = 'OPTIONS') {
            set $cors "${cors}options";
        }

        # non-OPTIONS indicates a normal CORS request
        if ($request_method = 'GET') {
            set $cors "${cors}get";
        }
        if ($request_method = 'POST') {
            set $cors "${cors}post";
        }

        # if it's a GET or POST, set the standard CORS responses header
        if ($cors = "trueget") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
            add_header 'Access-Control-Allow-Credentials' 'true';
            # # Tell the browser which response headers the JS can see, besides the "simple response headers"
            # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
        }

        if ($cors = "truepost") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
            add_header 'Access-Control-Allow-Credentials' 'true';
            # # Tell the browser which response headers the JS can see, besides the "simple response headers"
            # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
        }

        # if it's OPTIONS, then it's a CORS preflight request so respond immediately with no response body
        if ($cors = "trueoptions") {
            # Tells the browser this origin may make cross-origin requests
            # (Here, we echo the requesting origin, which matched the whitelist.)
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            # in a preflight response, tells browser the subsequent actual request can include user credentials (e.g., cookies)
            add_header 'Access-Control-Allow-Credentials' 'true';

            #
            # Return special preflight info
            #

            # Tell browser to cache this pre-flight info for 20 days
            add_header 'Access-Control-Max-Age' 1728000;

            # Tell browser we respond to GET,POST,OPTIONS in normal CORS requests.
            #
            # Not officially needed but still included to help non-conforming browsers.
            #
            # OPTIONS should not be needed here, since the field is used
            # to indicate methods allowed for "actual request" not the
            # preflight request.
            #
            # GET,POST also should not be needed, since the "simple
            # methods" GET,POST,HEAD are included by default.
            #
            # We should only need this header for non-simple requests
            # methods (e.g., DELETE), or custom request methods (e.g., XMODIFY)
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

            # Tell browser we accept these headers in the actual request

            # The bottom line: it seems there are headers needed for the
            # web and CORS to work, which at the moment you should
            # hard-code into Access-Control-Allow-Headers, although
            # official specs imply this should not be necessary.
            #
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';

            # build entire response to the preflight request
            # no body in this response
            add_header 'Content-Length' 0;
            # (should not be necessary, but included for non-conforming browsers)
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            # indicate successful return with no content
            return 204;
        }
    }

    location /static/ {
        root            %(proj_path)s;
        access_log      off;
        log_not_found   off;
    }

    location /robots.txt {
        root            %(proj_path)s/static;
        access_log      off;
        log_not_found   off;
    }

    location /favicon.ico {
        root            %(proj_path)s/static/img;
        access_log      off;
        log_not_found   off;
    }

}
